/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package server.application;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;

/**
 *
 * @author Andrey
 */
public class ServerApplication extends javax.swing.JFrame {

    /**
     * Creates new form ServerApplication
     */
    public ServerApplication() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        listClients = new java.awt.List();
        jTextInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        listClients.setMultipleMode(true);

        jTextInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextInputKeyReleased(evt);
            }
        });

        jTextOutput.setColumns(20);
        jTextOutput.setRows(5);
        jScrollPane1.setViewportView(jTextOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(listClients, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listClients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                .addContainerGap())
        );

        listClients.getAccessibleContext().setAccessibleName("listClients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        //close all threads and chanels
    }//GEN-LAST:event_formWindowClosing

    private void jTextInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextInputKeyReleased
        // TODO add your handling code here:
        //jTextOutput.setText(evt.getKeyCode() + "  " + evt.getKeyChar());
        if (evt.getKeyCode() == 10) {//Enter
            String[] selectedClients = listClients.getSelectedItems();
            jTextOutput.setText(jTextOutput.getText() + "Clients: <");
            for (int i=0; i< selectedClients.length; i++){
                jTextOutput.setText(jTextOutput.getText() + selectedClients[i].substring(7)+",");
            }
            jTextOutput.setText(jTextOutput.getText() + ">");
            
            jTextOutput.setText(jTextOutput.getText() +jTextInput.getText() + "\r\n");
            if (jTextInput.getText().equalsIgnoreCase("cls")) {
                jTextOutput.setText("");
            }
            else if (jTextInput.getText().equalsIgnoreCase("exit")) {
                Collection<PrintWriter> allClients = clientsOutput.values();
                Iterator<PrintWriter> it = allClients.iterator(); 
                for (;it.hasNext();){
                    it.next().println("TERMINATE");
                }
                System.exit(0);
            }
            else if (jTextInput.getText().equalsIgnoreCase("threads.count")) {
                jTextOutput.setText(jTextOutput.getText() + Thread.activeCount() + "\r\n");
            }
            else if (jTextInput.getText().equalsIgnoreCase("threads.getthreads")) {
                jTextOutput.setText(jTextOutput.getText() + Thread.getAllStackTraces().values().toString() + "\r\n");
            }
            else{
                //out = new PrintWriter(it.next().getOutputStream(), true);
                for (int i=0; i< selectedClients.length; i++){
                        clientsOutput.get(selectedClients[i]).println(jTextInput.getText());
                }
            }
            jTextInput.setText("");
        }
        
        
        

        //if (evt.getKeyCode() == )
    }//GEN-LAST:event_jTextInputKeyReleased
    /**
     * @param args the command line arguments
     */
    private static int port = 4444;
    private static BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
    private static Hashtable<Thread, Socket> map = new Hashtable<>();
    private Hashtable<String, PrintWriter> clientsOutput = new Hashtable<>();
    
    
    public static ServerApplication ServApp;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServApp = new ServerApplication();
                ServApp.setVisible(true);
            }
        });
        startServer();
    }

    public static void startServer() {
        ServerSocket server = null;
        try {
            server = new ServerSocket(port);
        } catch (IOException e) {

            System.err.println("Could not listen on port: " + port);
            System.err.println(e);
            System.exit(1);
        }
        Thread t = new Thread(new ServerConn(server));
        t.start();
        
        //talk with clients
        
        
        
    }

    public void addClienToList(Thread thread,Socket socket ) throws IOException {
        listClients.add(thread.getName());//listClients.add(socket.toString()+" "+socket.getPort()); //
        map.put(thread, socket);
        clientsOutput.put(thread.getName(), new PrintWriter(socket.getOutputStream(), true));
    }
    public void remClientFromList(Thread thread){
        listClients.remove(thread.getName());
        map.remove(thread);
        clientsOutput.remove(thread.getName());
    }
    
    public void printMsgOnScreen(String msg){
        jTextOutput.setText(jTextOutput.getText() + msg + "\r\n");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextInput;
    private javax.swing.JTextArea jTextOutput;
    private java.awt.List listClients;
    // End of variables declaration//GEN-END:variables
}
